__author__ = 'abovell'

""""Single threaded class based solution to the sudoku problem.

Easy to understand brute force algorithm with backtracking.
Adonis Bovell
adonis.ais@gmail.com
"""

import random
import sys

class InvalidStateException(Exception):
    """Short circuit mechanism when results are invalid"""
    pass

class Square(object):
    """Sudoku piece, aware of its neighbors"""

    OPTIONS = set(['1', '2', '3', '4', '5', '6', '7', '8', '9'])
    NEIGHBORS = {
        '0': [9, 5, 3, 6, 72, 7, 45, 11, 8, 36, 18, 63, 54, 19, 1, 20, 2, 10, 27, 4],
        '1': [9, 5, 4, 6, 7, 11, 8, 18, 0, 37, 19, 10, 64, 46, 20, 2, 73, 3, 28, 55],
        '2': [18, 5, 29, 6, 0, 7, 11, 8, 9, 74, 19, 10, 38, 20, 65, 1, 3, 47, 56, 4],
        '3': [23, 5, 12, 57, 6, 30, 7, 8, 0, 1, 13, 14, 2, 39, 21, 75, 66, 48, 22, 4],
        '4': [49, 58, 5, 3, 6, 23, 7, 8, 31, 0, 76, 1, 13, 14, 2, 21, 12, 40, 22, 67],
        '5': [23, 77, 59, 41, 6, 32, 7, 8, 0, 68, 1, 13, 14, 2, 50, 21, 12, 3, 22, 4],
        '6': [5, 17, 33, 15, 69, 51, 42, 7, 60, 26, 8, 78, 25, 1, 4, 0, 2, 16, 3, 24],
        '7': [70, 5, 43, 15, 6, 0, 25, 79, 61, 52, 26, 8, 34, 1, 4, 16, 2, 3, 17, 24],
        '8': [5, 17, 15, 6, 4, 25, 16, 35, 26, 71, 53, 44, 0, 1, 62, 7, 2, 3, 80, 24],
        '9': [14, 15, 0, 16, 11, 17, 45, 27, 18, 63, 54, 19, 10, 20, 2, 1, 12, 72, 13, 36],
        '10': [9, 14, 15, 16, 11, 17, 18, 0, 37, 19, 1, 55, 46, 20, 2, 73, 12, 28, 13, 64],
        '11': [18, 14, 12, 15, 0, 16, 17, 9, 74, 19, 1, 13, 38, 20, 65, 10, 2, 47, 56, 29],
        '12': [23, 14, 3, 57, 15, 30, 16, 17, 5, 9, 10, 13, 11, 39, 21, 75, 66, 48, 22, 4],
        '13': [49, 58, 14, 12, 15, 23, 16, 17, 5, 31, 9, 76, 10, 4, 11, 21, 3, 40, 22, 67],
        '14': [23, 5, 59, 41, 15, 32, 16, 17, 77, 9, 68, 10, 13, 11, 50, 21, 12, 3, 22, 4],
        '15': [14, 17, 33, 69, 6, 51, 42, 16, 11, 60, 26, 8, 78, 9, 25, 10, 7, 12, 13, 24],
        '16': [70, 14, 43, 15, 6, 34, 79, 61, 52, 26, 8, 11, 9, 25, 10, 7, 12, 17, 13, 24],
        '17': [14, 71, 15, 6, 25, 7, 11, 35, 26, 8, 53, 44, 9, 10, 62, 16, 80, 12, 13, 24],
        '18': [23, 24, 0, 25, 20, 26, 45, 27, 9, 63, 54, 19, 10, 11, 2, 1, 21, 36, 72, 22],
        '19': [23, 10, 24, 25, 20, 26, 9, 0, 37, 28, 73, 55, 46, 11, 2, 1, 21, 18, 22, 64],
        '20': [23, 38, 24, 25, 2, 26, 9, 0, 19, 10, 22, 74, 11, 65, 1, 21, 18, 47, 56, 29],
        '21': [23, 5, 75, 24, 25, 57, 26, 14, 18, 3, 19, 22, 20, 39, 30, 12, 66, 48, 13, 4],
        '22': [49, 23, 5, 12, 24, 25, 4, 26, 14, 31, 58, 67, 19, 18, 20, 21, 3, 40, 13, 76],
        '23': [32, 5, 59, 41, 24, 25, 4, 26, 14, 77, 18, 68, 19, 20, 50, 21, 12, 3, 13, 22],
        '24': [23, 26, 33, 69, 6, 51, 25, 7, 60, 17, 8, 78, 18, 42, 19, 20, 21, 16, 22, 15],
        '25': [23, 70, 43, 24, 6, 34, 7, 61, 52, 26, 8, 20, 18, 19, 79, 21, 16, 17, 22, 15],
        '26': [23, 16, 24, 6, 25, 7, 35, 17, 71, 53, 8, 18, 19, 62, 20, 80, 21, 44, 22, 15],
        '27': [32, 33, 46, 37, 0, 34, 35, 45, 72, 9, 63, 54, 28, 38, 47, 30, 18, 31, 29, 36],
        '28': [32, 33, 38, 34, 35, 10, 37, 27, 29, 45, 19, 73, 64, 46, 47, 1, 30, 36, 31, 55],
        '29': [32, 33, 46, 34, 2, 35, 11, 37, 27, 65, 45, 28, 38, 20, 74, 56, 30, 36, 47, 31],
        '30': [49, 32, 31, 75, 50, 41, 34, 57, 35, 3, 27, 28, 48, 29, 39, 33, 21, 12, 66, 40],
        '31': [49, 32, 33, 4, 50, 34, 35, 27, 58, 28, 48, 13, 29, 39, 41, 30, 67, 40, 22, 76],
        '32': [49, 23, 5, 59, 33, 29, 41, 34, 35, 14, 77, 27, 68, 48, 28, 39, 31, 50, 30, 40],
        '33': [32, 35, 15, 6, 51, 34, 69, 60, 53, 78, 44, 42, 28, 29, 43, 52, 30, 27, 31, 24],
        '34': [32, 31, 35, 33, 51, 25, 79, 70, 43, 53, 27, 44, 42, 28, 29, 7, 52, 30, 16, 61],
        '35': [32, 52, 33, 51, 34, 17, 43, 26, 8, 53, 27, 42, 28, 62, 29, 71, 80, 30, 44, 31],
        '36': [9, 38, 41, 46, 0, 42, 43, 45, 44, 18, 63, 54, 28, 39, 29, 47, 37, 27, 72, 40],
        '37': [38, 41, 29, 42, 43, 36, 1, 45, 19, 73, 55, 46, 47, 39, 10, 44, 28, 40, 27, 64],
        '38': [41, 46, 42, 2, 43, 11, 37, 36, 65, 45, 28, 39, 29, 20, 74, 56, 44, 47, 40, 27],
        '39': [49, 32, 3, 41, 21, 42, 57, 43, 40, 36, 44, 37, 48, 38, 75, 50, 30, 12, 66, 31],
        '40': [49, 58, 41, 4, 32, 42, 43, 36, 44, 37, 48, 13, 38, 39, 50, 30, 67, 31, 22, 76],
        '41': [49, 23, 5, 59, 50, 32, 42, 43, 14, 77, 36, 40, 37, 68, 38, 31, 39, 30, 44, 48],
        '42': [60, 43, 41, 15, 6, 51, 34, 69, 35, 53, 36, 37, 33, 38, 39, 52, 78, 44, 40, 24],
        '43': [35, 41, 39, 51, 42, 79, 70, 52, 25, 40, 53, 36, 44, 34, 37, 38, 7, 33, 16, 61],
        '44': [52, 41, 39, 51, 42, 17, 35, 26, 8, 53, 36, 40, 34, 37, 62, 38, 71, 43, 33, 80],
        '45': [49, 9, 46, 50, 38, 51, 52, 54, 53, 27, 18, 0, 37, 28, 29, 63, 47, 36, 72, 48],
        '46': [49, 50, 38, 51, 52, 45, 53, 27, 1, 37, 19, 10, 55, 29, 47, 73, 36, 28, 48, 64],
        '47': [49, 46, 50, 38, 51, 2, 52, 11, 45, 53, 27, 65, 37, 28, 29, 20, 74, 56, 36, 48],
        '48': [49, 32, 75, 50, 51, 57, 52, 47, 53, 31, 3, 21, 45, 46, 39, 41, 30, 12, 66, 40],
        '49': [58, 32, 50, 4, 51, 52, 53, 31, 45, 48, 13, 46, 39, 41, 30, 67, 47, 40, 22, 76],
        '50': [49, 23, 5, 59, 41, 51, 52, 14, 53, 40, 45, 68, 48, 46, 77, 39, 30, 32, 47, 31],
        '51': [49, 52, 50, 15, 6, 60, 42, 69, 35, 53, 78, 34, 45, 46, 47, 43, 33, 44, 48, 24],
        '52': [49, 35, 50, 51, 25, 7, 70, 43, 53, 44, 34, 45, 48, 46, 79, 33, 16, 47, 61, 42],
        '53': [49, 52, 50, 51, 34, 17, 35, 26, 8, 62, 44, 42, 45, 48, 46, 71, 80, 33, 47, 43],
        '54': [58, 9, 59, 65, 60, 61, 63, 62, 27, 18, 72, 45, 73, 55, 0, 74, 56, 36, 57, 64],
        '55': [58, 59, 65, 60, 57, 61, 1, 54, 62, 72, 37, 19, 10, 64, 46, 63, 74, 73, 28, 56],
        '56': [58, 59, 29, 60, 2, 61, 11, 62, 63, 72, 54, 65, 55, 38, 20, 74, 73, 57, 47, 64],
        '57': [58, 77, 59, 60, 30, 61, 67, 3, 62, 54, 68, 55, 56, 75, 39, 21, 12, 66, 48, 76],
        '58': [49, 77, 59, 13, 4, 60, 57, 61, 67, 62, 31, 54, 68, 55, 56, 75, 66, 40, 22, 76],
        '59': [58, 23, 5, 68, 41, 32, 60, 57, 61, 67, 14, 62, 54, 55, 77, 50, 75, 66, 56, 76],
        '60': [58, 70, 59, 33, 15, 6, 51, 42, 79, 69, 71, 62, 78, 54, 55, 80, 56, 57, 61, 24],
        '61': [58, 59, 78, 69, 60, 25, 7, 70, 52, 71, 62, 80, 34, 54, 55, 79, 43, 56, 16, 57],
        '62': [58, 59, 71, 78, 69, 60, 17, 61, 35, 26, 8, 53, 44, 54, 55, 79, 80, 56, 57, 70],
        '63': [65, 9, 68, 69, 72, 70, 45, 71, 27, 18, 0, 54, 67, 73, 55, 74, 56, 36, 66, 64],
        '64': [65, 68, 69, 63, 10, 66, 70, 1, 71, 72, 54, 19, 73, 55, 46, 56, 74, 37, 28, 67],
        '65': [68, 29, 69, 63, 2, 70, 11, 71, 72, 54, 73, 55, 38, 20, 74, 47, 67, 66, 56, 64],
        '66': [58, 77, 68, 69, 30, 70, 71, 3, 63, 67, 59, 64, 65, 75, 39, 21, 12, 57, 48, 76],
        '67': [49, 58, 77, 68, 13, 4, 69, 66, 70, 71, 31, 63, 59, 64, 65, 75, 57, 40, 22, 76],
        '68': [58, 23, 5, 59, 41, 69, 32, 66, 70, 71, 77, 63, 67, 64, 14, 65, 50, 75, 57, 76],
        '69': [68, 33, 15, 6, 51, 42, 79, 70, 60, 80, 62, 71, 63, 64, 65, 78, 67, 66, 61, 24],
        '70': [63, 68, 78, 69, 60, 25, 79, 61, 43, 80, 62, 71, 34, 64, 7, 65, 52, 16, 66, 67],
        '71': [68, 78, 69, 60, 17, 70, 35, 26, 8, 53, 44, 63, 80, 62, 79, 65, 67, 66, 61, 64],
        '72': [9, 77, 75, 78, 63, 79, 45, 80, 36, 18, 0, 54, 76, 73, 64, 74, 65, 56, 27, 55],
        '73': [74, 77, 1, 78, 72, 79, 37, 80, 76, 63, 54, 19, 10, 64, 46, 65, 56, 75, 28, 55],
        '74': [77, 29, 78, 63, 79, 11, 80, 72, 2, 54, 76, 73, 64, 38, 20, 65, 47, 75, 56, 55],
        '75': [58, 77, 12, 78, 30, 79, 59, 80, 76, 72, 68, 73, 57, 74, 39, 21, 3, 66, 48, 67],
        '76': [49, 58, 77, 68, 78, 79, 75, 80, 31, 72, 59, 73, 13, 57, 74, 4, 66, 40, 22, 67],
        '77': [58, 23, 5, 59, 41, 78, 32, 79, 76, 80, 57, 72, 68, 73, 14, 74, 50, 75, 66, 67],
        '78': [77, 33, 15, 6, 51, 42, 79, 70, 60, 80, 69, 71, 72, 76, 73, 62, 74, 75, 61, 24],
        '79': [77, 52, 78, 69, 60, 25, 16, 61, 43, 71, 62, 80, 34, 73, 7, 74, 75, 72, 70, 76],
        '80': [77, 17, 69, 78, 60, 79, 61, 35, 26, 8, 53, 44, 72, 73, 62, 71, 74, 75, 70, 76]
    }

    def __init__(self, index, value):
        self.index = index
        self.value = value
        self.options = None
        self.neighbors = None

    def solve(self):
        self.update_options()
        n = len(self.options)
        if n == 1:
            self.value = self.options.pop()
            return True
        if n == 0:
            raise InvalidStateException()
        return False

    def __repr__(self):
        return self.value

    def update_options(self):
        used_options = set()
        unused_neighbors = set()
        for square in self.neighbors:
            if square.value == '0':
                unused_neighbors.add(square)
            else:
                used_options.add(square.value)
        self.options = self.options - used_options
        self.neighbors = unused_neighbors

    def set_neighbors(self, parent):
        self.options = Square.OPTIONS
        self.neighbors = set(parent.squares[index] for index in Square.NEIGHBORS[str(self.index)])


class Puzzle(object):
    def __init__(self, sequence):
        self.states = []
        self.build_puzzle(sequence)

    def build_puzzle(self, sequence):
        self.squares = []
        self.unsolved = []
        for index, value in enumerate(sequence):
            self.squares.append(Square(index, value))
            if value == '0':
                self.unsolved.append(self.squares[index])
        for square in self.unsolved:
            square.set_neighbors(self)

    def solve(self):
        unsolved = []
        for square in self.unsolved:
            if not square.solve():
                unsolved.append(square)
        unsolved.sort(key=lambda square: len(square.options), reverse=True)
        self.unsolved = unsolved

    def save_state_and_guess(self):
        # TODO: spawn separate threads instead of guessing
        # TODO: limit to CPU count threads
        state = str(self)
        square = self.unsolved.pop()
        square.value = random.sample(square.options, 1)[0]
        square.options.remove(square.value)
        self.states.append((state, square.index, square.options))

    def restore_state_and_continue(self):
        state, index, others = self.states.pop()
        self.build_puzzle(state)
        self.squares[index].options = others

    def progress(self):
        start_state = len(self.unsolved)
        self.solve()
        return len(self.unsolved) - start_state

    def solved(self):
        return len(self.unsolved) == 0

    def __str__(self):
        return ''.join([str(square) for square in self.squares])

def main():
    puzzle = Puzzle(sys.argv[1])
    while True:
        if puzzle.solved():
            print puzzle
            return
        try:
            if puzzle.progress() == 0:
                puzzle.save_state_and_guess()
        except InvalidStateException:
            puzzle.restore_state_and_continue()

if __name__ == '__main__':
    main()

